// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Database;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(RTSContext))]
    partial class RTSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("backend.Database.Models.AttributeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DriverValid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LapValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RaceDriverValid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RaceValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AttributeDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The team the driver belongs to",
                            DriverValid = true,
                            LapValid = false,
                            Name = "Team",
                            RaceDriverValid = true,
                            RaceValid = false,
                            Type = "SingleLineOfText"
                        });
                });

            modelBuilder.Entity("backend.Database.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Driver 1",
                            User = new Guid("3b5a8ee7-de4a-4671-85cd-1c2c87a0ed39")
                        },
                        new
                        {
                            Id = 2,
                            Name = "Driver 2",
                            User = new Guid("fd2a664a-214c-410a-bb3b-7c0bf141c1c1")
                        },
                        new
                        {
                            Id = 3,
                            Name = "Driver 3",
                            User = new Guid("564f2489-2369-45bb-aa65-fde69d43d97d")
                        });
                });

            modelBuilder.Entity("backend.Database.Models.DriverAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverAttributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefinitionId = 1,
                            DriverId = 1,
                            Value = "Team1"
                        },
                        new
                        {
                            Id = 2,
                            DefinitionId = 1,
                            DriverId = 2,
                            Value = "Team2"
                        },
                        new
                        {
                            Id = 3,
                            DefinitionId = 1,
                            DriverId = 3,
                            Value = "Team3"
                        });
                });

            modelBuilder.Entity("backend.Database.Models.DriverTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("TagId");

                    b.ToTable("DriverTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DriverId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            DriverId = 2,
                            TagId = 1
                        },
                        new
                        {
                            Id = 3,
                            DriverId = 3,
                            TagId = 1
                        });
                });

            modelBuilder.Entity("backend.Database.Models.Lap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceDriverId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceDriverId");

                    b.ToTable("Laps");
                });

            modelBuilder.Entity("backend.Database.Models.LapAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LapId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("LapId");

                    b.ToTable("LapAttributes");
                });

            modelBuilder.Entity("backend.Database.Models.LapTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LapId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LapId");

                    b.HasIndex("TagId");

                    b.ToTable("LapTags");
                });

            modelBuilder.Entity("backend.Database.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("User")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("backend.Database.Models.RaceAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceAttributes");
                });

            modelBuilder.Entity("backend.Database.Models.RaceDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceDrivers");
                });

            modelBuilder.Entity("backend.Database.Models.RaceDriverAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceDriverId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("RaceDriverId");

                    b.ToTable("RaceDriverAttributes");
                });

            modelBuilder.Entity("backend.Database.Models.RaceDriverTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceDriverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceDriverId");

                    b.HasIndex("TagId");

                    b.ToTable("RaceDriverTags");
                });

            modelBuilder.Entity("backend.Database.Models.RaceTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("TagId");

                    b.ToTable("RaceTags");
                });

            modelBuilder.Entity("backend.Database.Models.TagCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("DriverValid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LapValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RaceDriverValid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RaceValid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TagCategorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The tyre the driver prefers",
                            DriverValid = true,
                            LapValid = false,
                            Name = "Tyre",
                            RaceDriverValid = true,
                            RaceValid = false
                        });
                });

            modelBuilder.Entity("backend.Database.Models.TagDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("TagDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Value = "Soft"
                        });
                });

            modelBuilder.Entity("backend.Database.Models.DriverAttribute", b =>
                {
                    b.HasOne("backend.Database.Models.AttributeDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.Driver", "Driver")
                        .WithMany("Attributes")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("backend.Database.Models.DriverTag", b =>
                {
                    b.HasOne("backend.Database.Models.Driver", "Driver")
                        .WithMany("Tags")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.TagDefinition", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("backend.Database.Models.Lap", b =>
                {
                    b.HasOne("backend.Database.Models.RaceDriver", "RaceDriver")
                        .WithMany()
                        .HasForeignKey("RaceDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceDriver");
                });

            modelBuilder.Entity("backend.Database.Models.LapAttribute", b =>
                {
                    b.HasOne("backend.Database.Models.AttributeDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.Lap", "Lap")
                        .WithMany("Attributes")
                        .HasForeignKey("LapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("Lap");
                });

            modelBuilder.Entity("backend.Database.Models.LapTag", b =>
                {
                    b.HasOne("backend.Database.Models.Lap", "Lap")
                        .WithMany("Tags")
                        .HasForeignKey("LapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.TagDefinition", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lap");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("backend.Database.Models.RaceAttribute", b =>
                {
                    b.HasOne("backend.Database.Models.AttributeDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.Race", "Race")
                        .WithMany("Attributes")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("backend.Database.Models.RaceDriver", b =>
                {
                    b.HasOne("backend.Database.Models.Driver", "Driver")
                        .WithMany("RaceEntries")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.Race", "Race")
                        .WithMany("RaceEntries")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("backend.Database.Models.RaceDriverAttribute", b =>
                {
                    b.HasOne("backend.Database.Models.AttributeDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.RaceDriver", "RaceDriver")
                        .WithMany("Attributes")
                        .HasForeignKey("RaceDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("RaceDriver");
                });

            modelBuilder.Entity("backend.Database.Models.RaceDriverTag", b =>
                {
                    b.HasOne("backend.Database.Models.RaceDriver", "RaceDriver")
                        .WithMany("Tags")
                        .HasForeignKey("RaceDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.TagDefinition", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceDriver");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("backend.Database.Models.RaceTag", b =>
                {
                    b.HasOne("backend.Database.Models.Race", "Race")
                        .WithMany("Tags")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Database.Models.TagDefinition", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("backend.Database.Models.TagDefinition", b =>
                {
                    b.HasOne("backend.Database.Models.TagCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("backend.Database.Models.Driver", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("RaceEntries");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("backend.Database.Models.Lap", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("backend.Database.Models.Race", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("RaceEntries");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("backend.Database.Models.RaceDriver", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
